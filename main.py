import os
import json
import logging
import signal
import sys
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ utils.py
from .utils import (
    load_data, save_data, register_user, get_spots_left, 
    get_user_data, get_user_stats, generate_referral_link
)

# –û—Ç—Ä–∏–º—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent.parent

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
def signal_handler(sig, frame):
    print('\n–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...')
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv(BASE_DIR / '.env')

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤
def load_texts():
    texts = {}
    texts_dir = BASE_DIR / 'bot' / 'texts'
    for lang in ['ua', 'ru', 'en']:
        with open(texts_dir / f'{lang}.json', 'r', encoding='utf-8') as file:
            texts[lang] = json.load(file)
    return texts

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
try:
    texts = load_texts()
except Exception as e:
    logger.error(f"Error loading texts: {e}")
    sys.exit(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    message_text = update.message.text
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    referral_code = None
    if len(message_text.split()) > 1:
        referral_code = message_text.split()[1]
    
    success, message = register_user(user.id, user.username, user.language_code, referral_code)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
    keyboard = [
        [
            InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_ua"),
            InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if message == "No spots left":
        await update.message.reply_text(
            "–ù–∞ –∂–∞–ª—å, –≤—Å—ñ –º—ñ—Å—Ü—è –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è."
        )
        return
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
    welcome_message = "üåê –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please select your language"
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    
    logger.info(f"User {user.id} started bot. Registration status: {message}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /stats"""
    user_stats = get_user_stats(update.effective_user.id)
    if not user_stats:
        await update.message.reply_text("–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    spots_left = get_spots_left()
    ref_link = generate_referral_link(update.effective_user.id)
    
    stats_message = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üíé –¢–æ–∫–µ–Ω—ñ–≤ Helper: {user_stats['tokens']}\n"
        f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {user_stats['referrals_count']}\n"
        f"üí∞ –ó–∞—Ä–æ–±–ª–µ–Ω–æ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö: {user_stats['referral_earnings']}\n"
        f"üìù –í—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å: {spots_left}\n"
        f"üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥: {user_stats['referral_code']}\n"
        f"üåê –í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n{ref_link}\n\n"
        f"–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –ø–æ 1000 —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ –∫–æ–∂–Ω–æ–≥–æ!"
    )
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    keyboard = [
        [InlineKeyboardButton("üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥", callback_data=f"copy_code_{user_stats['referral_code']}")],
        [InlineKeyboardButton("üîó –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", callback_data="copy_link")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(stats_message, reply_markup=reply_markup)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("lang_"):
        # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
        selected_lang = query.data.split('_')[1]
        user_id = query.from_user.id
        
        user_data = get_user_data(user_id)
        spots_left = get_spots_left()
        
        logger.info(f"User {user_id} selected language: {selected_lang}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –¥–ª—è MiniApp
        base_url = "https://efm-ua.github.io/drophelper-miniapp"
        webapp_url = f"{base_url}/index-{selected_lang}.html"
        params = f"?spots={spots_left}&tokens={user_data['tokens']}&ref={user_data['referral_code']}&lang={selected_lang}"
        webapp_url += params
        
        logger.info(f"Generated WebApp URL: {webapp_url}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è MiniApp
        keyboard = [[InlineKeyboardButton(
            texts[selected_lang]["button"],
            web_app=WebAppInfo(url=webapp_url)
        )]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        await query.message.reply_text(texts[selected_lang]["language_selected"])
        
        image_path = BASE_DIR / 'image.webp'
        with open(image_path, 'rb') as photo:
            await query.message.reply_photo(
                photo=photo,
                caption=texts[selected_lang]["welcome"],
                reply_markup=reply_markup
            )
    
    elif query.data.startswith("copy_code_"):
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É
        code = query.data.split('_')[2]
        await query.message.reply_text(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ {code} —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!")
    
    elif query.data == "copy_link":
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        ref_link = generate_referral_link(query.from_user.id)
        await query.message.reply_text(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!\n{ref_link}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help"""
    help_text = (
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n"
        "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
        "/stats - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
        "‚ÑπÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n"
        "- –û—Ç—Ä–∏–º–∞–π—Ç–µ 5000 —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é\n"
        "- –ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ 1000 —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ –∫–æ–∂–Ω–æ–≥–æ\n"
        "- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"
    )
    await update.message.reply_text(help_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
        application = Application.builder().token(os.getenv('BOT_TOKEN')).build()

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CallbackQueryHandler(button_click))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except KeyboardInterrupt:
        print("\n–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
        if 'application' in locals():
            application.stop()
        print("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–∏–π")
        sys.exit(0)

    except Exception as e:
        print(f"\n–ü–æ–º–∏–ª–∫–∞: {e}")
        if 'application' in locals():
            application.stop()
        sys.exit(1)

if __name__ == '__main__':
    main()