import os
import json
import logging
import signal
import sys
from datetime import datetime
from pathlib import Path
from functools import wraps
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ utils.py —Ç–∞ locales.py
from .utils import (
    load_data, save_data, register_user, get_spots_left, 
    get_user_data, get_user_stats, generate_referral_link,
    update_statistics, get_statistics, clear_statistics, delete_user
)
from .locales import LocaleManager

# –û—Ç—Ä–∏–º—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent.parent

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
ADMIN_USERS = ['1229624876']

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
locale_manager = LocaleManager(BASE_DIR / 'bot' / 'texts')

def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω-–ø—Ä–∞–≤"""
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = str(update.effective_user.id)
        if user_id not in ADMIN_USERS:
            await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

def signal_handler(sig, frame):
    print('\n–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...')
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv(BASE_DIR / '.env')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    message_text = update.message.text
    user_id_str = str(user.id)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_language = locale_manager.get_user_language(user_id_str, user.language_code)
    logger.info(f"Detected language for user {user_id_str}: {user_language}")
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    update_statistics(user.id, 'bot_start', {
        'language': user_language,
        'country': None
    })
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    referral_code = None
    if len(message_text.split()) > 1:
        referral_code = message_text.split()[1]
    
    success, message = register_user(user.id, user.username, user_language, referral_code)
    
    if message == "No spots left":
        await update.message.reply_text(
            locale_manager.get_text("spots_taken", user_id_str, user_language)
        )
        return
        
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è MiniApp
    spots_left = get_spots_left()
    user_data = get_user_data(user.id)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è URL –¥–ª—è MiniApp
    base_url = "https://efm-ua.github.io/drophelper-miniapp"
    webapp_url = f"{base_url}/index-{user_language}.html"
    params = f"?spots={spots_left}&tokens={user_data['tokens']}&ref={user_data['referral_code']}&lang={user_language}"
    webapp_url += params
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è MiniApp
    keyboard = [[InlineKeyboardButton(
        locale_manager.get_text("button", user_id_str, user_language),
        web_app=WebAppInfo(url=webapp_url)
    )]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ
    with open(BASE_DIR / 'image.webp', 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption=locale_manager.get_text("welcome", user_id_str, user_language),
            reply_markup=reply_markup
        )
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è WebApp
    update_statistics(user.id, 'webapp_open')
    logger.info(f"User {user_id_str} started bot. Registration status: {message}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /stats"""
    user = update.effective_user
    user_id_str = str(user.id)
    user_language = locale_manager.get_user_language(user_id_str, user.language_code)
    
    user_stats = get_user_stats(user.id)
    if not user_stats:
        await update.message.reply_text(
            locale_manager.get_text("not_registered", user_id_str, user_language)
        )
        return
    
    spots_left = get_spots_left()
    ref_link = generate_referral_link(user.id)
    
    stats_message = (
        f"{locale_manager.get_text('stats_title', user_id_str, user_language)}:\n\n"
        f"{locale_manager.get_text('tokens_label', user_id_str, user_language)}: {user_stats['tokens']}\n"
        f"{locale_manager.get_text('referrals_label', user_id_str, user_language)}: {user_stats['referrals_count']}\n"
        f"{locale_manager.get_text('earnings_label', user_id_str, user_language)}: {user_stats['referral_earnings']}\n"
        f"{locale_manager.get_text('spots_left_label', user_id_str, user_language)}: {spots_left}\n\n"
        f"{locale_manager.get_text('referral_link_label', user_id_str, user_language)}:\n{ref_link}"
    )
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    keyboard = [[InlineKeyboardButton(
        locale_manager.get_text("copy_link_button", user_id_str, user_language),
        callback_data="copy_link"
    )]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(stats_message, reply_markup=reply_markup)

@admin_required
async def stats_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /stats_admin"""
    stats = get_statistics()
    if not stats:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    message = (
        "üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
        f"üåê –ó–∞–ø—É—Å–∫—ñ–≤ MiniApp: {stats['webapp_opens']}\n"
        f"üìà –ö–æ–Ω–≤–µ—Ä—Å—ñ—è: {stats['conversion']}%\n"
        f"üìù –í—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å: {stats['spots_left']}\n\n"
        "üó£ –ú–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n"
    )
    
    for lang, count in stats['languages'].items():
        flag = {
            'uk': 'üá∫üá¶',
            'ua': 'üá∫üá¶',
            'ru': 'üá∑üá∫',
            'en': 'üá¨üáß',
            'unknown': '‚ùì'
        }.get(lang.lower(), 'üåê')
        message += f"{flag} {lang}: {count}\n"
    
    if stats['countries']:
        message += "\nüåç –ö—Ä–∞—ó–Ω–∏:\n"
        for country, count in stats['countries'].items():
            message += f"- {country}: {count}\n"
    
    await update.message.reply_text(message)

@admin_required
async def clear_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /clear_stats"""
    success, message = clear_statistics()
    user_id_str = str(update.effective_user.id)
    user_language = locale_manager.get_user_language(user_id_str, update.effective_user.language_code)
    
    if success:
        await update.message.reply_text(
            "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /stats_admin –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
        )
    else:
        await update.message.reply_text(
            locale_manager.format_text("error_occurred", user_id_str, error=message)
        )

@admin_required
async def delete_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /delete_user"""
    if not context.args:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /delete_user <user_id>"
        )
        return
    
    try:
        user_id = context.args[0]
        success, message = delete_user(user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ {message}")
        else:
            await update.message.reply_text(f"‚ùå {message}")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help"""
    user = update.effective_user
    user_id_str = str(user.id)
    user_language = locale_manager.get_user_language(user_id_str, user.language_code)
    
    help_text = (
        f"{locale_manager.get_text('help_title', user_id_str, user_language)}:\n\n"
        f"/start - {locale_manager.get_text('help_start', user_id_str, user_language)}\n"
        f"/stats - {locale_manager.get_text('help_stats', user_id_str, user_language)}\n"
        f"/help - {locale_manager.get_text('help_help', user_id_str, user_language)}\n\n"
        f"{locale_manager.get_text('help_additional', user_id_str, user_language)}:\n"
        f"{locale_manager.get_text('help_tokens_info', user_id_str, user_language)}"
    )
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
    if user_id_str in ADMIN_USERS:
        admin_help = (
            "\n\nüëë –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "/stats_admin - –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/clear_stats - –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/delete_user - –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ñ–æ—Ä–º–∞—Ç: /delete_user <user_id>)"
        )
        help_text += admin_help
    
    await update.message.reply_text(help_text)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "copy_link":
        user = query.from_user
        user_id_str = str(user.id)
        user_language = locale_manager.get_user_language(user_id_str, user.language_code)
        
        ref_link = generate_referral_link(user.id)
        await query.message.reply_text(
            f"{locale_manager.get_text('link_copied', user_id_str, user_language)}\n{ref_link}"
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
        application = Application.builder().token(os.getenv('BOT_TOKEN')).build()

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("stats_admin", stats_admin))
        application.add_handler(CommandHandler("clear_stats", clear_stats_command))
        application.add_handler(CommandHandler("delete_user", delete_user_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CallbackQueryHandler(button_click))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except KeyboardInterrupt:
        print("\n–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
        if 'application' in locals():
            application.stop()
        print("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–∏–π")
        sys.exit(0)

    except Exception as e:
        print(f"\n–ü–æ–º–∏–ª–∫–∞: {e}")
        if 'application' in locals():
            application.stop()
        sys.exit(1)

if __name__ == '__main__':
    main()